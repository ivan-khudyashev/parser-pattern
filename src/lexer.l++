/* Copyright (C) Khudyashev Ivan, 2019, bahek1983@gmail.com */
%top{
    #include "parser.hpp"
%}

/* Options */
%o fast dotall unicode
%o matcher=reflex
%o noyywrap bison-cc
%o bison-cc-namespace=test
%o bison-cc-parser=parser
%o namespace=test
%o lexer=lexer
%o lex=yylex

%{
using TToken = test::parser::token_type;
const char * token_type(TToken t);
#define YY_USER_ACTION std::cout << "Token <- " << text() << " ->" << std::endl;
%}
/* Define names */
/* * Define helpers * */
H_NBSP                              \u{00A0}
H_ZWNBSP                            \u{FEFF}
H_SP                                \u{0020}
H_LS                                \u{2028}
H_PS                                \u{2029}
H_ZWNJ                              \u{200C}
H_ZWJ                               \u{200D}
/* * Main names * */
/* ** Separators ** */
WHITESPACE                          [\t\v\f]|{H_SP}|{H_NBSP}|{H_ZWNBSP}|\p{Zs}
LINETERMINATOR                      [\n\r]|{H_LS}|{H_PS}
LINETERMINATORSEQUENCE              (?:\n\r/[^\n])|(?:{H_LS}{H_PS}\r\n)
MULTILINECOMMENT                    "/*"(?:[^*]|(?:\*+[^*/]))*\*+\/
SINGLELINECOMMENT                   "//"[^\n\r\u{2028}\u{2029}]*
/* ** Universals ** */
UNICODEESCAPESEQUENCE               (?:u[[:xdigit:]]{4})|(?:"u{"[[:xdigit:]]{1,6}"}")
/* ** Identifiers ** */
IDENTIFIERSTART                     \p{UnicodeIdentifierStart}|[$_]|(?:\\{UNICODEESCAPESEQUENCE})
IDENTIFIERPART                      \p{UnicodeIdentifierPart}|"$"|{H_ZWNJ}|{H_ZWJ}|(?:\\{UNICODEESCAPESEQUENCE})
/* ** Numeric literals ** */
/* *** Numeric literal helpers *** */
DECIMALINTEGERLITERAL               0|(?:[1-9][[:digit:]]*)
EXPONENTPART                        [eE][+-]?[[:digit:]]+
/* *** numeric literals *** */
DECIMALLITERAL                      (?:{DECIMALINTEGERLITERAL}(?:(?:\.[[:digit:]]*{EXPONENTPART}?)|{EXPONENTPART}?))|(?:\.[[:digit:]]+{EXPONENTPART}?)
BINARYINTEGERLITERAL                0[bB][01]+
OCTALINTEGERLITERAL                 0[oO][0-7]+
HEXINTEGERLITERAL                   0[xX][[:xdigit:]]+
/* ** String literals ** */
ESCAPESEQUENCE                      \\(?:[^\n\r\u{2028}\u{2029}0-9xu]|(?:x[[:xdigit:]]{2})|{UNICODEESCAPESEQUENCE})
NULLESCAPE                          \\0/[^0-9]
DOUBLEQUOTESTRING                   \"(?:(?:[^"\\\n\r\u{2028}\u{2029}])|{ESCAPESEQUENCE}|{NULLESCAPE})*\"
SINGLEQUOTESTRING                   \'(?:(?:[^'\\\n\r\u{2028}\u{2029}])|{ESCAPESEQUENCE}|{NULLESCAPE})*\'
%%
{WHITESPACE}+                       /* skip Whitespaces */
{SINGLELINECOMMENT}|{MULTILINECOMMENT} /* skip Comments */
{LINETERMINATOR}                    { YY_USER_ACTION return TToken::LINETERMINATOR; }
{LINETERMINATORSEQUENCE} 
 /* Punctuators */
";"                                 { YY_USER_ACTION return TToken::P_SEMI; }
 /* Literals */
 /* * Constant-lexem literals * */
null                                { YY_USER_ACTION return TToken::L_NULL; }
true                                { YY_USER_ACTION return TToken::L_TRUE; }
false                               { YY_USER_ACTION return TToken::L_FALSE; }
 /* * Numeric literals * */
{DECIMALLITERAL}|{BINARYINTEGERLITERAL}|{OCTALINTEGERLITERAL}|{HEXINTEGERLITERAL} { YY_USER_ACTION return TToken::L_NUMERIC; }
 /* * String literals * */
{DOUBLEQUOTESTRING}|{SINGLEQUOTESTRING} { YY_USER_ACTION return TToken::L_STRING; }
 /* * Regular expression literals * */
 /* Identifiers */
{IDENTIFIERSTART}{IDENTIFIERPART}*  { YY_USER_ACTION return TToken::IDENTIFIER; }
 /* Final rules */
<<EOF>>                             { return TToken::T_END; }
.|\n                                { return TToken::T_UNDEFINED; }
%%
const char* token_type(TToken t)
{
    int offset = (int)TToken::LINETERMINATOR;
    static const char* tokens[] = {
        "LINETERMINATOR",
        "P_SEMI",
        "L_NULL",
        "L_TRUE",
        "L_FALSE",
        "L_NUMERIC",
        "L_STRING",
        "IDENTIFIER",
        "T_UNDEFINED"
    };
    static const char error_token[] = "Wrong Token's type";
    int tokens_count = sizeof tokens / sizeof(const char*);
    if(((int)t - offset >= tokens_count)||((int)t - offset < 0)) {
        return error_token;
    }
    return tokens[(int)t - offset];
}
